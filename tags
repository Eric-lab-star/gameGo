!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/kyungsubkim/Programming/GO/game/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a454f33e/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
Animate	text/text.go	/^func (t *Text) Animate(frame int) {$/;"	f	struct:text.Text
CenterX	text/text.go	/^func (t *Text) CenterX(screenWidth float32) {$/;"	f	struct:text.Text
Color	text/text.go	/^	Color    rl.Color$/;"	m	struct:text.Text	typeref:typename:rl.Color
Draw	text/text.go	/^func (t *Text) Draw() {$/;"	f	struct:text.Text
Font	text/text.go	/^	Font     rl.Font$/;"	m	struct:text.Text	typeref:typename:rl.Font
Heigth	text/text.go	/^func (t *Text) Heigth() float32 {$/;"	f	struct:text.Text	typeref:typename:float32
Len	text/text.go	/^func (t *Text) Len() float32 {$/;"	f	struct:text.Text	typeref:typename:float32
MoveWithArrow	text/text.go	/^func (t *Text) MoveWithArrow(minX float32, maxX float32, minY float32, maxY float32) {$/;"	f	struct:text.Text
Msg	text/text.go	/^	Msg      string$/;"	m	struct:text.Text	typeref:typename:string
New	text/text.go	/^func New(msg string) Text {$/;"	f	package:text	typeref:typename:Text
Position	text/text.go	/^	Position rl.Vector2$/;"	m	struct:text.Text	typeref:typename:rl.Vector2
SetFont	text/text.go	/^func (t *Text) SetFont(filename string) {$/;"	f	struct:text.Text
Size	text/text.go	/^	Size     float32$/;"	m	struct:text.Text	typeref:typename:float32
Spacing	text/text.go	/^	Spacing  float32$/;"	m	struct:text.Text	typeref:typename:float32
Text	text/text.go	/^type Text struct {$/;"	s	package:text
buildColors	main.go	/^	buildColors  []rl.Color     = make([]rl.Color, maxBuildings)$/;"	v	package:main	typeref:typename:[]rl.Color
buildings	main.go	/^	buildings    []rl.Rectangle = make([]rl.Rectangle, maxBuildings)$/;"	v	package:main	typeref:typename:[]rl.Rectangle
createBuildings	main.go	/^func createBuildings() {$/;"	f	package:main
gameGo	README.md	/^# gameGo$/;"	c
gameLoop	main.go	/^func gameLoop() {$/;"	f	package:main
init	main.go	/^func init() {$/;"	f	package:main
main	cmd/main.go	/^func main() {$/;"	f	package:main
main	cmd/main.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
maxBuildings	cmd/main.go	/^	maxBuildings int = 100$/;"	v	package:main	typeref:typename:int
maxBuildings	main.go	/^	maxBuildings int            = 100$/;"	v	package:main	typeref:typename:int
player	main.go	/^	player       rl.Rectangle   = rl.NewRectangle(400, 280, 40, 40)$/;"	v	package:main	typeref:typename:rl.Rectangle
rl	cmd/main.go	/^	rl "github.com\/gen2brain\/raylib-go\/raylib"$/;"	P	package:github.com/gen2brain/raylib-go/raylib
rl	main.go	/^import rl "github.com\/gen2brain\/raylib-go\/raylib"$/;"	P	package:github.com/gen2brain/raylib-go/raylib
rl	text/text.go	/^import rl "github.com\/gen2brain\/raylib-go\/raylib"$/;"	P	package:github.com/gen2brain/raylib-go/raylib
screenHeight	main.go	/^	screenHeight int32          = 450$/;"	v	package:main	typeref:typename:int32
screenWidth	main.go	/^	screenWidth  int32          = 800$/;"	v	package:main	typeref:typename:int32
spacing	main.go	/^	spacing      float32        = 0$/;"	v	package:main	typeref:typename:float32
text	text/text.go	/^package text$/;"	p
